BUILD ?= debug

CC ?= clang

# Detect the operating system
UNAME_S := $(shell uname -s)

ifeq ($(UNAME_S),Darwin)
    # Platform-specific linker flags for dead code elimination
    GC_SECTIONS_FLAG := -Wl,-dead_strip
	# Use sed with -i '' for in-place editing on macOS
	SED_INPLACE := sed -i ''
else
    GC_SECTIONS_FLAG := -Wl,--gc-sections
	SED_INPLACE := sed -i
endif

# Architecture configuration
ARCH ?= native

ifeq ($(BUILD),release)
    CFLAGS_BUILD := -O3 -DNDEBUG
    LDFLAGS_BUILD :=  -static $(GC_SECTIONS_FLAG)
    BUILD_SUFFIX := 
else
    SANITIZER_FLAGS := -fsanitize=undefined -fsanitize=address -fno-omit-frame-pointer
    CFLAGS_BUILD := -O1 -g3 $(SANITIZER_FLAGS)
    LDFLAGS_BUILD :=  -static $(SANITIZER_FLAGS) $(GC_SECTIONS_FLAG)
    BUILD_SUFFIX := -debug
endif

# -D_POSIX_C_SOURCE=200809L is for strnlen()
CFLAGS_COMMON := -std=c2x -march=$(ARCH) -D_POSIX_C_SOURCE=200809L \
                 -Wall -Wextra -Wpedantic -Wconversion \
                 -Wno-incompatible-pointer-types-discards-qualifiers \
                 -ffunction-sections -fdata-sections \
                 -MMD -MP

CFLAGS := $(CFLAGS_COMMON) $(CFLAGS_BUILD)
LDFLAGS := $(LDFLAGS_BUILD)

SRCEXT := c

SRCDIR := src
INC := -I include
BUILDDIR := build/$(BUILD)
BINDIR := bin

TARGET := $(BINDIR)/weather-station$(BUILD_SUFFIX)

SOURCES := $(wildcard $(SRCDIR)/*.$(SRCEXT))
OBJECTS := $(patsubst $(SRCDIR)/%,$(BUILDDIR)/%,$(SOURCES:.$(SRCEXT)=.o))

# Dependency files generated by -MMD flag
DEPS := $(OBJECTS:.o=.d)

# JSON Compilation Database file
JSON_DB := compile_commands.json
JSON_PARTS := $(OBJECTS:=.json)


.PHONY: all debug release clean-comp-db clean check-cppcheck check-infer check-csa help


all: $(TARGET) $(JSON_DB)

debug:
	$(MAKE) BUILD=debug

release:
	$(MAKE) BUILD=release

$(TARGET): $(OBJECTS)
	@echo "Linking..."
	@mkdir -p $(BINDIR)
	$(CC) $(LDFLAGS) $^ -o $(TARGET)

$(BUILDDIR)/%.o: $(SRCDIR)/%.$(SRCEXT)
	@echo "Building object files...";
	@mkdir -p $(BUILDDIR)
	$(CC) $(CFLAGS) $(INC) -c -o $@ $< -MJ $@.json

$(JSON_DB): $(OBJECTS)
	@echo "Creating JSON Compilation Database..."
	@echo '[' > $@
	$(foreach part,$(JSON_PARTS),cat $(part) >> $@;)
	@$(SED_INPLACE) '$$ s/,$$//' $@
	@echo ']' >> $@

clean-comp-db:
	@echo "Cleaning JSON Compilation Database..."
	rm -rf $(JSON_DB)

clean:
	@echo "Cleaning...";
	$(RM) -rf build/* $(BINDIR)/* infer-out/

# --suppress=missingIncludeSystem is needed if cppcheck cannot find the standard headers on your system
check-cppcheck:
	cppcheck . --verbose   \
		--showtime=summary \
		-j 4               \
		-I include/        \
		--enable=all       \
		--suppress=missingIncludeSystem

check-infer:
	$(MAKE) clean
	infer run --cost                  \
		--bufferoverrun               \
		--loop-hoisting               \
		--procedures                  \
		--procedures-attributes       \
		--procedures-name             \
		--procedures-summary          \
		--pulse                       \
		--quandary                    \
		--source-files                \
		--topl                        \
		--no-cxx                      \
		--html                        \
		--write-html                  \
		--issues-tests issues.txt     \
		--cost-issues-tests costs.txt \
		-- make
	$(MAKE) clean

# Note: Z3 solver is required for crosscheck-with-z3
check-csa:
	$(MAKE) clean
	scan-build -analyze-headers                                          \
        -maxloop 30                                                      \
        -analyzer-config mode=deep                                       \
        -analyzer-config exploration_strategy=dfs                        \
        -analyzer-config max-inlinable-size=500                          \
        -analyzer-config max-nodes=750000                                \
        -analyzer-config track-conditions=true                           \
        -analyzer-config track-conditions-debug=true                     \
        -analyzer-config eagerly-assume=false                            \
        -analyzer-config graph-trim-interval=10                          \
        -analyzer-config unroll-loops=true                               \
        -analyzer-config widen-loops=true                                \
        -analyzer-config ipa=dynamic-bifurcate                           \
        -analyzer-config ipa-always-inline-size=3                        \
        -analyzer-config aggressive-binary-operation-simplification=true \
        -analyzer-config crosscheck-with-z3=true                         \
        -analyzer-config exploration-strategy=unexplored_first_queue     \
        -analyzer-config notes-as-events=true                            \
        --force-analyze-debug-code                                       \
        -enable-checker alpha                                            \
        -enable-checker core                                             \
        -enable-checker deadcode                                         \
        -enable-checker nullability                                      \
        -enable-checker optin                                            \
        -enable-checker security                                         \
        -enable-checker unix                                             \
        -enable-checker alpha.clone                                      \
        -enable-checker alpha.core                                       \
        -enable-checker alpha.deadcode                                   \
        -enable-checker alpha.security                                   \
        -enable-checker alpha.unix                                       \
        $(MAKE)

help:
	@echo "Available targets:"
	@echo "    debug          Build with debug info"
	@echo "    release        Build optimized version"
	@echo "    clean-comp-db  Remove JSON Compilation Database"
	@echo "    clean          Remove all build artifacts (including binaries)"
	@echo "    check-cppcheck Run static analysis with Cppcheck"
	@echo "    check-infer    Run static analysis with Infer"
	@echo "    check-csa      Run static analysis with Clang Static Analyzer"
	@echo "    help           Show this help message"

-include $(DEPS)
